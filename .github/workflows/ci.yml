name: 🤖 AI Research Brief Generator - CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual trigger

jobs:
  # ========================================
  # Job 1: Code Quality & Linting
  # ========================================
  lint:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: 🎨 Check Code Formatting with Black
        run: black --check --diff *.py app/ || true
      
      - name: 🔎 Lint with Flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # ========================================
  # Job 2: Run Tests
  # ========================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint  # Run after linting passes
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: 🧪 Run Tests with pytest
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          pytest test_api.py -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
      
      - name: 📊 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # ========================================
  # Job 3: API Health Check (Production)
  # ========================================
  health-check:
    name: 🏥 Production Health Check
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      
      - name: 🔍 Run Deployment Tests
        run: |
          python test_deployed_api.py
      
      - name: ✅ Health Check Passed
        run: echo "✅ Production API is healthy and responding correctly!"

  # ========================================
  # Job 4: Build Notification (Success)
  # ========================================
  notify-success:
    name: ✅ Build Success Notification
    runs-on: ubuntu-latest
    needs: [lint, test, health-check]
    if: success()
    
    steps:
      - name: 🎉 Success Message
        run: |
          echo "============================================"
          echo "🎉 CI/CD Pipeline Completed Successfully!"
          echo "============================================"
          echo "✅ Code Quality: PASSED"
          echo "✅ Tests: PASSED"
          echo "✅ Health Check: PASSED"
          echo "============================================"
          echo "🚀 Ready for deployment!"
